datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
enum UserRole {
  user
  admin
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(user)
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
}

// Service model
model Service {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  content     String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Blog Post model
model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  excerpt       String?     @db.Text
  content       Json        @db.JsonB
  featuredImage String?
  status        PostStatus  @default(draft)
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  publishedAt   DateTime?
  metadata      Json?       @db.JsonB  // Change to JsonB for better JSON handling

  @@index([authorId])
}

enum PostStatus {
  draft
  published
}

// Contact form submissions
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
