datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model
enum UserRole {
  user
  admin
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  role           UserRole         @default(user)
  posts          Post[]
  accounts       Account[]
  sessions       Session[]
  formEntries    FormEntry[]
  projects       Project[]
  media          Media[]
}

// Service model
model Service {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String
  content     String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Blog Post model
model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  excerpt       String?    @db.Text
  content       Json       @db.JsonB
  featuredImage String?
  status        PostStatus @default(draft)
  authorId      String
  author        User       @relation(fields: [authorId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  publishedAt   DateTime?
  metadata      Json?      @db.JsonB

  @@index([authorId])
  @@index([title]) // Add index for better search performance
  @@index([publishedAt])
  @@index([status])
}

enum PostStatus {
  draft
  published
}

// Remove Contact and GetStarted models and add Forms system
model Form {
  id          String      @id @default(cuid())
  name        String // e.g., "contact", "get-started"
  title       String // Display title
  description String?
  fields      Json // Field definitions
  status      String      @default("active") // active, disabled
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  entries     FormEntry[]

  @@index([name])
}

model FormEntry {
  id        String   @id @default(cuid())
  formId    String
  data      Json     @db.JsonB // Actual form submission data
  status    String   @default("new")
  metadata  Json?    @db.JsonB // Additional metadata like IP, user agent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String? // Optional relation to user if logged in
  form      Form     @relation(fields: [formId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])

  @@index([formId])
  @@index([status])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectStatus {
  draft
  active
  completed
  archived
}

model Project {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  description String?       @db.Text
  content     Json?         @db.JsonB
  status      ProjectStatus @default(draft)
  featured    Boolean       @default(false)
  clientId    String        
  client      User          @relation(fields: [clientId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  startDate   DateTime?
  endDate     DateTime?
  coverImage  String?
  images      String[]
  category    String?
  tags        String[]
  metadata    Json?         @db.JsonB

  @@index([clientId])
  @@index([status])
  @@index([featured])
  @@index([title]) // Add index for better search performance
  @@index([category])
  @@index([tags])
}

// Media model for uploaded files
model Media {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  name       String
  key        String   @unique
  url        String
  size       Int
  type       String
  uploadedAt DateTime @default(now())
  metadata   Json?    @db.JsonB

  @@index([userId])
}
